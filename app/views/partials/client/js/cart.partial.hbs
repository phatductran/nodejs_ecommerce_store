<script>
  // Render cart 
  const sessionCart = JSON.parse(sessionStorage.getItem('shoppingCart'))
  const cartBody = document.getElementById('shopping-cart-body')

  if (sessionCart && sessionCart.length > 0) {
    cartBody.innerHTML = ''
    // Create row
    sessionCart.forEach(item => {
      const row = document.createElement('tr')
      // Product
      const productCell = document.createElement('td')
      productCell.dataset.productId = item.id
      const productImg = document.createElement('img')
      productImg.src = item.imgSrc
      productImg.classList.add("cart-item-img")
      productImg.style.width = '70px'
      productImg.style.height = '70px'
      const productName = document.createElement('span')
      productName.innerText = item.name
      productName.classList.add("ml-1", "p-1")
      productCell.append(productImg, productName)
      // Size
      const sizeCell = document.createElement('td')
      sizeCell.classList.add("text-center")
      sizeCell.innerText = item.size
      // Amount
      const amountCell = document.createElement('td')
      amountCell.classList.add('text-center')
      const amountInputContainer = document.createElement('div')
      amountInputContainer.classList.add('amount-container')
      const amountInput = document.createElement('input')
      amountInput.type = 'number'
      amountInput.name = 'amount'
      amountInput.min = 0
      amountInput.max = 100
      amountInput.step = 1
      amountInput.setAttribute("value", parseInt(item.amount)) 
      // Update cost when adjust amount
      amountInput.addEventListener('change', () => {
        amountInput.setAttribute("value", parseInt(amountInput.value)) 
        bindingCosts()
      })
      amountInputContainer.append(amountInput)
      amountCell.append(amountInputContainer)
      // Price
      const priceCell = document.createElement('td')
      priceCell.classList.add('text-center')
      const priceInput = document.createElement('input')
      priceInput.hidden = true
      priceInput.type = 'number'
      priceInput.name = 'price'
      priceInput.value = parseFloat(item.price)
      priceCell.innerText = `$${parseFloat(item.price)}`
      priceCell.append(priceInput)
      // Remove
      const removeCell = document.createElement('td')
      removeCell.classList.add('text-center')
      const removeBtn = document.createElement('a')
      removeBtn.href = 'javascript:void(0);'
      removeBtn.classList.add('btn', 'btn-danger')
      removeBtn.id = 'remove-cart-item'
      removeBtn.addEventListener('click', () => {
        row.remove()
        const newShoppingCart = 
        JSON.parse(sessionStorage.getItem('shoppingCart')).filter(shoppingItem => shoppingItem.id != item.id)
        // Set new cart
        sessionStorage.removeItem('shoppingCart')
        sessionStorage.setItem('shoppingCart', JSON.stringify(newShoppingCart))

        document.getElementById(`cart-item-${item.id}`).remove()
        // Update total-num
        document.getElementById('cart-total-num').innerText = parseInt(document.getElementById('cart-total-num').innerText) - item.amount
        if (document.getElementById('cart-total-num').innerText == 0) {
          createBlankCart()
          subTotalPrice = 0
          cartBody.innerHTML = `
          <tr>
            <td colspan="5">No items</td>
          </tr>`
        } else {
          subTotalPrice -= parseFloat(item.price) * item.amount
        }
        // Update costs
        bindingCosts()
      })
      const removeIcon = document.createElement('i')
      removeIcon.classList.add('fa', 'fa-trash')
      removeBtn.appendChild(removeIcon)
      removeCell.appendChild(removeBtn)

      // Add to row
      row.append(productCell, sizeCell, amountCell, priceCell, removeCell)
      cartBody.append(row)

      bindingCosts()
    })

    // embedding cart data
    const checkoutData = wrapCartData()
    const checkoutDataInput = document.createElement('input')
    checkoutDataInput.hidden = true
    checkoutDataInput.type = 'text'
    checkoutDataInput.name = 'checkoutData'
    checkoutDataInput.setAttribute("value", JSON.stringify(checkoutData)) 
    document.querySelector('table.table').append(checkoutDataInput)
  }
  // Disable checkout button when there is no item
  if (cartBody.children.length === 1 && cartBody.children[0].children.length === 1) {
    document.getElementById('checkout-button').setAttribute('disabled', true)
  }

  function bindingCosts() {
    let subTotal = 0
    let shippingCost = parseFloat(document.getElementById('shippingCost').innerText.replace("$", ""))
    Array.from(cartBody.children).map(tRow => {
      const amountValue = parseInt(tRow.children[2].children[0].children[0].value)
      const priceValue = parseFloat(tRow.children[3].innerText.replace("$",""))
      subTotal += amountValue * priceValue
    })
    // Set cost
    document.getElementById('subtotalCost').innerText = `$${parseFloat(subTotal)}`
    document.getElementById('totalCost').innerText = `$${parseFloat(subTotal + shippingCost)}`
  }

  function wrapCartData() {
    const tableRows = Array.from(document.getElementById('shopping-cart-body').children)
    let cartData = []
    tableRows.map( row => {
      cartData.push({
        id: row.children[0].dataset.productId,
        amount: parseInt(row.children[2].children[0].children[0].value)
      })
    })

    return cartData
  }

</script>